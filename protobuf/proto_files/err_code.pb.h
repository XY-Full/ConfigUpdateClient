// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: err_code.proto
// Protobuf C++ Version: 6.30.0

#ifndef err_5fcode_2eproto_2epb_2eh
#define err_5fcode_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 6030000
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_err_5fcode_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_err_5fcode_2eproto {
  static const ::uint32_t offsets[];
};
extern "C" {
extern const ::google::protobuf::internal::DescriptorTable descriptor_table_err_5fcode_2eproto;
}  // extern "C"
namespace ErrorCode {
enum ErrorCode : int;
extern const uint32_t ErrorCode_internal_data_[];
}  // namespace ErrorCode
namespace google {
namespace protobuf {
template <>
internal::EnumTraitsT<::ErrorCode::ErrorCode_internal_data_>
    internal::EnumTraitsImpl::value<::ErrorCode::ErrorCode>;
}  // namespace protobuf
}  // namespace google

namespace ErrorCode {
enum ErrorCode : int {
  Error_unknown = 0,
  Error_success = 1,
  ErrorCode_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  ErrorCode_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

extern const uint32_t ErrorCode_internal_data_[];
inline constexpr ErrorCode ErrorCode_MIN =
    static_cast<ErrorCode>(0);
inline constexpr ErrorCode ErrorCode_MAX =
    static_cast<ErrorCode>(1);
inline bool ErrorCode_IsValid(int value) {
  return 0 <= value && value <= 1;
}
inline constexpr int ErrorCode_ARRAYSIZE = 1 + 1;
const ::google::protobuf::EnumDescriptor* PROTOBUF_NONNULL ErrorCode_descriptor();
template <typename T>
const std::string& ErrorCode_Name(T value) {
  static_assert(std::is_same<T, ErrorCode>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ErrorCode_Name().");
  return ErrorCode_Name(static_cast<ErrorCode>(value));
}
template <>
inline const std::string& ErrorCode_Name(ErrorCode value) {
  return ::google::protobuf::internal::NameOfDenseEnum<ErrorCode_descriptor, 0, 1>(
      static_cast<int>(value));
}
inline bool ErrorCode_Parse(
    absl::string_view name, ErrorCode* PROTOBUF_NONNULL value) {
  return ::google::protobuf::internal::ParseNamedEnum<ErrorCode>(ErrorCode_descriptor(), name,
                                           value);
}

// ===================================================================



// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace ErrorCode


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::ErrorCode::ErrorCode> : std::true_type {};
template <>
inline const EnumDescriptor* PROTOBUF_NONNULL GetEnumDescriptor<::ErrorCode::ErrorCode>() {
  return ::ErrorCode::ErrorCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // err_5fcode_2eproto_2epb_2eh
