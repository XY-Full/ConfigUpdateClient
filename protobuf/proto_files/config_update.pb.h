// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: config_update.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_config_5fupdate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_config_5fupdate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "base.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_config_5fupdate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_config_5fupdate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_config_5fupdate_2eproto;
namespace cs {
class ConfigUpdate;
struct ConfigUpdateDefaultTypeInternal;
extern ConfigUpdateDefaultTypeInternal _ConfigUpdate_default_instance_;
class ConfigUpdate_Request;
struct ConfigUpdate_RequestDefaultTypeInternal;
extern ConfigUpdate_RequestDefaultTypeInternal _ConfigUpdate_Request_default_instance_;
class ConfigUpdate_Response;
struct ConfigUpdate_ResponseDefaultTypeInternal;
extern ConfigUpdate_ResponseDefaultTypeInternal _ConfigUpdate_Response_default_instance_;
}  // namespace cs
PROTOBUF_NAMESPACE_OPEN
template<> ::cs::ConfigUpdate* Arena::CreateMaybeMessage<::cs::ConfigUpdate>(Arena*);
template<> ::cs::ConfigUpdate_Request* Arena::CreateMaybeMessage<::cs::ConfigUpdate_Request>(Arena*);
template<> ::cs::ConfigUpdate_Response* Arena::CreateMaybeMessage<::cs::ConfigUpdate_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cs {

// ===================================================================

class ConfigUpdate_Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cs.ConfigUpdate.Request) */ {
 public:
  inline ConfigUpdate_Request() : ConfigUpdate_Request(nullptr) {}
  ~ConfigUpdate_Request() override;
  explicit PROTOBUF_CONSTEXPR ConfigUpdate_Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigUpdate_Request(const ConfigUpdate_Request& from);
  ConfigUpdate_Request(ConfigUpdate_Request&& from) noexcept
    : ConfigUpdate_Request() {
    *this = ::std::move(from);
  }

  inline ConfigUpdate_Request& operator=(const ConfigUpdate_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigUpdate_Request& operator=(ConfigUpdate_Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigUpdate_Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigUpdate_Request* internal_default_instance() {
    return reinterpret_cast<const ConfigUpdate_Request*>(
               &_ConfigUpdate_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ConfigUpdate_Request& a, ConfigUpdate_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigUpdate_Request* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigUpdate_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigUpdate_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigUpdate_Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigUpdate_Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigUpdate_Request& from) {
    ConfigUpdate_Request::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigUpdate_Request* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cs.ConfigUpdate.Request";
  }
  protected:
  explicit ConfigUpdate_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateFileFieldNumber = 1,
  };
  // repeated string update_file = 1;
  int update_file_size() const;
  private:
  int _internal_update_file_size() const;
  public:
  void clear_update_file();
  const std::string& update_file(int index) const;
  std::string* mutable_update_file(int index);
  void set_update_file(int index, const std::string& value);
  void set_update_file(int index, std::string&& value);
  void set_update_file(int index, const char* value);
  void set_update_file(int index, const char* value, size_t size);
  std::string* add_update_file();
  void add_update_file(const std::string& value);
  void add_update_file(std::string&& value);
  void add_update_file(const char* value);
  void add_update_file(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& update_file() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_update_file();
  private:
  const std::string& _internal_update_file(int index) const;
  std::string* _internal_add_update_file();
  public:

  // @@protoc_insertion_point(class_scope:cs.ConfigUpdate.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> update_file_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fupdate_2eproto;
};
// -------------------------------------------------------------------

class ConfigUpdate_Response final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cs.ConfigUpdate.Response) */ {
 public:
  inline ConfigUpdate_Response() : ConfigUpdate_Response(nullptr) {}
  ~ConfigUpdate_Response() override;
  explicit PROTOBUF_CONSTEXPR ConfigUpdate_Response(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigUpdate_Response(const ConfigUpdate_Response& from);
  ConfigUpdate_Response(ConfigUpdate_Response&& from) noexcept
    : ConfigUpdate_Response() {
    *this = ::std::move(from);
  }

  inline ConfigUpdate_Response& operator=(const ConfigUpdate_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigUpdate_Response& operator=(ConfigUpdate_Response&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigUpdate_Response& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigUpdate_Response* internal_default_instance() {
    return reinterpret_cast<const ConfigUpdate_Response*>(
               &_ConfigUpdate_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ConfigUpdate_Response& a, ConfigUpdate_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigUpdate_Response* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigUpdate_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigUpdate_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigUpdate_Response>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigUpdate_Response& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigUpdate_Response& from) {
    ConfigUpdate_Response::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigUpdate_Response* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cs.ConfigUpdate.Response";
  }
  protected:
  explicit ConfigUpdate_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
  };
  // int32 err = 1;
  void clear_err();
  int32_t err() const;
  void set_err(int32_t value);
  private:
  int32_t _internal_err() const;
  void _internal_set_err(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cs.ConfigUpdate.Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t err_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fupdate_2eproto;
};
// -------------------------------------------------------------------

class ConfigUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cs.ConfigUpdate) */ {
 public:
  inline ConfigUpdate() : ConfigUpdate(nullptr) {}
  ~ConfigUpdate() override;
  explicit PROTOBUF_CONSTEXPR ConfigUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigUpdate(const ConfigUpdate& from);
  ConfigUpdate(ConfigUpdate&& from) noexcept
    : ConfigUpdate() {
    *this = ::std::move(from);
  }

  inline ConfigUpdate& operator=(const ConfigUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigUpdate& operator=(ConfigUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigUpdate* internal_default_instance() {
    return reinterpret_cast<const ConfigUpdate*>(
               &_ConfigUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConfigUpdate& a, ConfigUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigUpdate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigUpdate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigUpdate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ConfigUpdate& from) {
    ConfigUpdate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigUpdate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cs.ConfigUpdate";
  }
  protected:
  explicit ConfigUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConfigUpdate_Request Request;
  typedef ConfigUpdate_Response Response;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestFieldNumber = 1,
    kResponseFieldNumber = 2,
  };
  // .cs.ConfigUpdate.Request request = 1;
  bool has_request() const;
  private:
  bool _internal_has_request() const;
  public:
  void clear_request();
  const ::cs::ConfigUpdate_Request& request() const;
  PROTOBUF_NODISCARD ::cs::ConfigUpdate_Request* release_request();
  ::cs::ConfigUpdate_Request* mutable_request();
  void set_allocated_request(::cs::ConfigUpdate_Request* request);
  private:
  const ::cs::ConfigUpdate_Request& _internal_request() const;
  ::cs::ConfigUpdate_Request* _internal_mutable_request();
  public:
  void unsafe_arena_set_allocated_request(
      ::cs::ConfigUpdate_Request* request);
  ::cs::ConfigUpdate_Request* unsafe_arena_release_request();

  // .cs.ConfigUpdate.Response response = 2;
  bool has_response() const;
  private:
  bool _internal_has_response() const;
  public:
  void clear_response();
  const ::cs::ConfigUpdate_Response& response() const;
  PROTOBUF_NODISCARD ::cs::ConfigUpdate_Response* release_response();
  ::cs::ConfigUpdate_Response* mutable_response();
  void set_allocated_response(::cs::ConfigUpdate_Response* response);
  private:
  const ::cs::ConfigUpdate_Response& _internal_response() const;
  ::cs::ConfigUpdate_Response* _internal_mutable_response();
  public:
  void unsafe_arena_set_allocated_response(
      ::cs::ConfigUpdate_Response* response);
  ::cs::ConfigUpdate_Response* unsafe_arena_release_response();

  // @@protoc_insertion_point(class_scope:cs.ConfigUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::cs::ConfigUpdate_Request* request_;
    ::cs::ConfigUpdate_Response* response_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_config_5fupdate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ConfigUpdate_Request

// repeated string update_file = 1;
inline int ConfigUpdate_Request::_internal_update_file_size() const {
  return _impl_.update_file_.size();
}
inline int ConfigUpdate_Request::update_file_size() const {
  return _internal_update_file_size();
}
inline void ConfigUpdate_Request::clear_update_file() {
  _impl_.update_file_.Clear();
}
inline std::string* ConfigUpdate_Request::add_update_file() {
  std::string* _s = _internal_add_update_file();
  // @@protoc_insertion_point(field_add_mutable:cs.ConfigUpdate.Request.update_file)
  return _s;
}
inline const std::string& ConfigUpdate_Request::_internal_update_file(int index) const {
  return _impl_.update_file_.Get(index);
}
inline const std::string& ConfigUpdate_Request::update_file(int index) const {
  // @@protoc_insertion_point(field_get:cs.ConfigUpdate.Request.update_file)
  return _internal_update_file(index);
}
inline std::string* ConfigUpdate_Request::mutable_update_file(int index) {
  // @@protoc_insertion_point(field_mutable:cs.ConfigUpdate.Request.update_file)
  return _impl_.update_file_.Mutable(index);
}
inline void ConfigUpdate_Request::set_update_file(int index, const std::string& value) {
  _impl_.update_file_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:cs.ConfigUpdate.Request.update_file)
}
inline void ConfigUpdate_Request::set_update_file(int index, std::string&& value) {
  _impl_.update_file_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:cs.ConfigUpdate.Request.update_file)
}
inline void ConfigUpdate_Request::set_update_file(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.update_file_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:cs.ConfigUpdate.Request.update_file)
}
inline void ConfigUpdate_Request::set_update_file(int index, const char* value, size_t size) {
  _impl_.update_file_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:cs.ConfigUpdate.Request.update_file)
}
inline std::string* ConfigUpdate_Request::_internal_add_update_file() {
  return _impl_.update_file_.Add();
}
inline void ConfigUpdate_Request::add_update_file(const std::string& value) {
  _impl_.update_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:cs.ConfigUpdate.Request.update_file)
}
inline void ConfigUpdate_Request::add_update_file(std::string&& value) {
  _impl_.update_file_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:cs.ConfigUpdate.Request.update_file)
}
inline void ConfigUpdate_Request::add_update_file(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.update_file_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:cs.ConfigUpdate.Request.update_file)
}
inline void ConfigUpdate_Request::add_update_file(const char* value, size_t size) {
  _impl_.update_file_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:cs.ConfigUpdate.Request.update_file)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ConfigUpdate_Request::update_file() const {
  // @@protoc_insertion_point(field_list:cs.ConfigUpdate.Request.update_file)
  return _impl_.update_file_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ConfigUpdate_Request::mutable_update_file() {
  // @@protoc_insertion_point(field_mutable_list:cs.ConfigUpdate.Request.update_file)
  return &_impl_.update_file_;
}

// -------------------------------------------------------------------

// ConfigUpdate_Response

// int32 err = 1;
inline void ConfigUpdate_Response::clear_err() {
  _impl_.err_ = 0;
}
inline int32_t ConfigUpdate_Response::_internal_err() const {
  return _impl_.err_;
}
inline int32_t ConfigUpdate_Response::err() const {
  // @@protoc_insertion_point(field_get:cs.ConfigUpdate.Response.err)
  return _internal_err();
}
inline void ConfigUpdate_Response::_internal_set_err(int32_t value) {
  
  _impl_.err_ = value;
}
inline void ConfigUpdate_Response::set_err(int32_t value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:cs.ConfigUpdate.Response.err)
}

// -------------------------------------------------------------------

// ConfigUpdate

// .cs.ConfigUpdate.Request request = 1;
inline bool ConfigUpdate::_internal_has_request() const {
  return this != internal_default_instance() && _impl_.request_ != nullptr;
}
inline bool ConfigUpdate::has_request() const {
  return _internal_has_request();
}
inline void ConfigUpdate::clear_request() {
  if (GetArenaForAllocation() == nullptr && _impl_.request_ != nullptr) {
    delete _impl_.request_;
  }
  _impl_.request_ = nullptr;
}
inline const ::cs::ConfigUpdate_Request& ConfigUpdate::_internal_request() const {
  const ::cs::ConfigUpdate_Request* p = _impl_.request_;
  return p != nullptr ? *p : reinterpret_cast<const ::cs::ConfigUpdate_Request&>(
      ::cs::_ConfigUpdate_Request_default_instance_);
}
inline const ::cs::ConfigUpdate_Request& ConfigUpdate::request() const {
  // @@protoc_insertion_point(field_get:cs.ConfigUpdate.request)
  return _internal_request();
}
inline void ConfigUpdate::unsafe_arena_set_allocated_request(
    ::cs::ConfigUpdate_Request* request) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.request_);
  }
  _impl_.request_ = request;
  if (request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cs.ConfigUpdate.request)
}
inline ::cs::ConfigUpdate_Request* ConfigUpdate::release_request() {
  
  ::cs::ConfigUpdate_Request* temp = _impl_.request_;
  _impl_.request_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cs::ConfigUpdate_Request* ConfigUpdate::unsafe_arena_release_request() {
  // @@protoc_insertion_point(field_release:cs.ConfigUpdate.request)
  
  ::cs::ConfigUpdate_Request* temp = _impl_.request_;
  _impl_.request_ = nullptr;
  return temp;
}
inline ::cs::ConfigUpdate_Request* ConfigUpdate::_internal_mutable_request() {
  
  if (_impl_.request_ == nullptr) {
    auto* p = CreateMaybeMessage<::cs::ConfigUpdate_Request>(GetArenaForAllocation());
    _impl_.request_ = p;
  }
  return _impl_.request_;
}
inline ::cs::ConfigUpdate_Request* ConfigUpdate::mutable_request() {
  ::cs::ConfigUpdate_Request* _msg = _internal_mutable_request();
  // @@protoc_insertion_point(field_mutable:cs.ConfigUpdate.request)
  return _msg;
}
inline void ConfigUpdate::set_allocated_request(::cs::ConfigUpdate_Request* request) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.request_;
  }
  if (request) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(request);
    if (message_arena != submessage_arena) {
      request = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, request, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.request_ = request;
  // @@protoc_insertion_point(field_set_allocated:cs.ConfigUpdate.request)
}

// .cs.ConfigUpdate.Response response = 2;
inline bool ConfigUpdate::_internal_has_response() const {
  return this != internal_default_instance() && _impl_.response_ != nullptr;
}
inline bool ConfigUpdate::has_response() const {
  return _internal_has_response();
}
inline void ConfigUpdate::clear_response() {
  if (GetArenaForAllocation() == nullptr && _impl_.response_ != nullptr) {
    delete _impl_.response_;
  }
  _impl_.response_ = nullptr;
}
inline const ::cs::ConfigUpdate_Response& ConfigUpdate::_internal_response() const {
  const ::cs::ConfigUpdate_Response* p = _impl_.response_;
  return p != nullptr ? *p : reinterpret_cast<const ::cs::ConfigUpdate_Response&>(
      ::cs::_ConfigUpdate_Response_default_instance_);
}
inline const ::cs::ConfigUpdate_Response& ConfigUpdate::response() const {
  // @@protoc_insertion_point(field_get:cs.ConfigUpdate.response)
  return _internal_response();
}
inline void ConfigUpdate::unsafe_arena_set_allocated_response(
    ::cs::ConfigUpdate_Response* response) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.response_);
  }
  _impl_.response_ = response;
  if (response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:cs.ConfigUpdate.response)
}
inline ::cs::ConfigUpdate_Response* ConfigUpdate::release_response() {
  
  ::cs::ConfigUpdate_Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::cs::ConfigUpdate_Response* ConfigUpdate::unsafe_arena_release_response() {
  // @@protoc_insertion_point(field_release:cs.ConfigUpdate.response)
  
  ::cs::ConfigUpdate_Response* temp = _impl_.response_;
  _impl_.response_ = nullptr;
  return temp;
}
inline ::cs::ConfigUpdate_Response* ConfigUpdate::_internal_mutable_response() {
  
  if (_impl_.response_ == nullptr) {
    auto* p = CreateMaybeMessage<::cs::ConfigUpdate_Response>(GetArenaForAllocation());
    _impl_.response_ = p;
  }
  return _impl_.response_;
}
inline ::cs::ConfigUpdate_Response* ConfigUpdate::mutable_response() {
  ::cs::ConfigUpdate_Response* _msg = _internal_mutable_response();
  // @@protoc_insertion_point(field_mutable:cs.ConfigUpdate.response)
  return _msg;
}
inline void ConfigUpdate::set_allocated_response(::cs::ConfigUpdate_Response* response) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.response_;
  }
  if (response) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(response);
    if (message_arena != submessage_arena) {
      response = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.response_ = response;
  // @@protoc_insertion_point(field_set_allocated:cs.ConfigUpdate.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace cs

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_config_5fupdate_2eproto
